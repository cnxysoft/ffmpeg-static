name: Build FFmpeg Static

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            triplet: darwin-amd64
          - os: macos-14
            triplet: darwin-arm64

          # Linux
          - os: ubuntu-22.04
            triplet: linux-amd64
            arch: x86_64
          - os: ubuntu-22.04
            triplet: linux-386
            arch: i686
          - os: ubuntu-22.04
            triplet: linux-arm
            arch: arm
          - os: ubuntu-22.04
            triplet: linux-arm64
            arch: aarch64

          # Windows (全部在 Ubuntu 上交叉编译)
          - os: ubuntu-22.04
            triplet: windows-amd64
            arch: x86_64
          - os: ubuntu-22.04
            triplet: windows-386
            arch: i686
          - os: ubuntu-22.04
            triplet: windows-arm
            arch: arm
          - os: ubuntu-22.04
            triplet: windows-arm64
            arch: aarch64

    steps:
      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: n7.1

      # Linux 依赖
      - name: Install deps (Linux x86/x86_64)
        if: matrix.triplet == 'linux-386' || matrix.triplet == 'linux-amd64'
        run: |
          sudo apt-get update
          if [ "${{ matrix.triplet }}" = "linux-386" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y \
              gcc-multilib g++-multilib \
              yasm nasm pkg-config build-essential
          else
            sudo apt-get install -y \
              yasm nasm pkg-config build-essential
          fi

      - name: Install deps (Linux ARM/ARM64)
        if: matrix.triplet == 'linux-arm' || matrix.triplet == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y yasm nasm pkg-config build-essential \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libssl-dev

      # macOS 依赖
      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: brew install yasm nasm

      # Windows 交叉编译依赖 (在 Ubuntu 上)
      - name: Install Windows cross-compilation deps
        if: startsWith(matrix.triplet, 'windows-') && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-mingw-w64 g++-mingw-w64 \
            binutils-mingw-w64 mingw-w64 \
            yasm nasm pkg-config build-essential \
            libx264-dev

      - name: Install LLVM-mingw (Windows cross targets on Ubuntu)
        if: startsWith(matrix.triplet, 'windows-') && runner.os == 'Linux'
        shell: bash
        run: |
          curl -L -o llvm-mingw.tar.xz https://github.com/mstorsjo/llvm-mingw/releases/download/20240820/llvm-mingw-20240820-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -xf llvm-mingw.tar.xz
          TOOLCHAIN=$PWD/llvm-mingw-20240820-ucrt-ubuntu-20.04-x86_64
          echo "$TOOLCHAIN/bin" >> $GITHUB_PATH

          # 创建必要的符号链接
          for triplet in x86_64-w64-mingw32 i686-w64-mingw32 aarch64-w64-mingw32 armv7-w64-mingw32; do
            ln -sf $TOOLCHAIN/bin/llvm-strings $TOOLCHAIN/bin/${triplet}-strings
            ln -sf $TOOLCHAIN/bin/llvm-windres $TOOLCHAIN/bin/${triplet}-windres
          done

      # x264 构建步骤
      - name: Build and install x264 (Linux amd64)
        if: matrix.triplet == 'linux-amd64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-amd64
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-amd64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Linux 386)
        if: matrix.triplet == 'linux-386'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-i386 \
            --extra-cflags="-m32" \
            --extra-ldflags="-m32"
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-i386/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (macOS amd64)
        if: matrix.triplet == 'darwin-amd64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-darwin-amd64
          make -j"$(sysctl -n hw.ncpu)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-darwin-amd64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (macOS arm64)
        if: matrix.triplet == 'darwin-arm64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-darwin-arm64
          make -j"$(sysctl -n hw.ncpu)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-darwin-arm64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Linux arm cross)
        if: matrix.triplet == 'linux-arm'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=arm-linux-gnueabihf \
            --cross-prefix=arm-linux-gnueabihf- \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-arm
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-arm/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Linux arm64 cross)
        if: matrix.triplet == 'linux-arm64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=aarch64-linux-gnu \
            --cross-prefix=aarch64-linux-gnu- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-arm64
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-arm64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows 386 cross)
        if: matrix.triplet == 'windows-386'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=i686-w64-mingw32 \
            --cross-prefix=i686-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-i686
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-i686/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows amd64 cross)
        if: matrix.triplet == 'windows-amd64'
        shell: bash
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          # 使用 LLVM-mingw 工具链
          CC=x86_64-w64-mingw32-clang \
          AR=llvm-ar \
          RANLIB=llvm-ranlib \
          STRIP=llvm-strip \
          ./configure \
            --host=x86_64-w64-mingw32 \
            --cross-prefix=x86_64-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-win64
          # 修复 Windows 特定的编译问题
          sed -i 's/-mstack-alignment=64//g' config.mak
          echo "#define fseeko _fseeki64" >> config.h
          echo "#define ftello _ftelli64" >> config.h
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-win64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows arm cross)
        if: matrix.triplet == 'windows-arm'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=arm-w64-mingw32 \
            --cross-prefix=armv7-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-winarm
          make -j"$(nproc)"
          make install

          # 验证安装
          echo "验证 x264 安装:"
          ls -la $HOME/x264-winarm/lib/pkgconfig/
          cat $HOME/x264-winarm/lib/pkgconfig/x264.pc

          echo "PKG_CONFIG_PATH=$HOME/x264-winarm/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows arm64 cross)
        if: matrix.triplet == 'windows-arm64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=aarch64-w64-mingw32 \
            --cross-prefix=aarch64-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-winarm64
          make -j"$(nproc)"
          make install

          # 验证安装
          echo "验证 x264 安装:"
          ls -la $HOME/x264-winarm64/lib/pkgconfig/
          cat $HOME/x264-winarm64/lib/pkgconfig/x264.pc

          echo "PKG_CONFIG_PATH=$HOME/x264-winarm64/lib/pkgconfig" >> $GITHUB_ENV

      # OpenSSL 构建步骤
      - name: Build OpenSSL for Linux amd64
        if: matrix.triplet == 'linux-amd64'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          ./Configure linux-x86_64 no-shared no-tests --prefix=$HOME/openssl-amd64
          make -j"$(nproc)"
          make install_sw
          echo "OPENSSL_PREFIX=$HOME/openssl-amd64" >> $GITHUB_ENV

      - name: Build OpenSSL for Linux 386
        if: matrix.triplet == 'linux-386'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          ./Configure linux-elf no-shared no-tests -m32 --prefix=$HOME/openssl-386
          make -j"$(nproc)"
          make install_sw
          echo "OPENSSL_PREFIX=$HOME/openssl-386" >> $GITHUB_ENV

      - name: Build OpenSSL for macOS amd64
        if: matrix.triplet == 'darwin-amd64'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          ./Configure darwin64-x86_64-cc no-shared no-tests --prefix=$HOME/openssl-darwin-amd64
          make -j"$(sysctl -n hw.ncpu)"
          make install_sw
          echo "OPENSSL_PREFIX=$HOME/openssl-darwin-amd64" >> $GITHUB_ENV

      - name: Build OpenSSL for macOS arm64
        if: matrix.triplet == 'darwin-arm64'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          ./Configure darwin64-arm64-cc no-shared no-tests --prefix=$HOME/openssl-darwin-arm64
          make -j"$(sysctl -n hw.ncpu)"
          make install_sw
          echo "OPENSSL_PREFIX=$HOME/openssl-darwin-arm64" >> $GITHUB_ENV

      - name: Build OpenSSL for Linux ARM/ARM64
        if: matrix.triplet == 'linux-arm' || matrix.triplet == 'linux-arm64'
        shell: bash
        run: |
          case "${{ matrix.triplet }}" in
            linux-arm)
              CROSS=arm-linux-gnueabihf
              CONF=linux-armv4
              PREFIX=$HOME/openssl-arm
              ;;
            linux-arm64)
              CROSS=aarch64-linux-gnu
              CONF=linux-aarch64
              PREFIX=$HOME/openssl-arm64
              ;;
          esac

          curl -LO https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          ./Configure $CONF no-tests \
            --cross-compile-prefix=$CROSS- \
            --prefix=$PREFIX --openssldir=$PREFIX/ssl

          make -j"$(nproc)"
          make install_sw

          echo "OPENSSL_PREFIX=$PREFIX" >> $GITHUB_ENV

      - name: Build OpenSSL for Windows targets
        if: startsWith(matrix.triplet, 'windows-')
        shell: bash
        run: |
          case "${{ matrix.triplet }}" in
            windows-386)
              TARGET=i686-w64-mingw32
              PREFIX=$HOME/openssl-win32
              CONF=mingw
              ;;
            windows-amd64)
              TARGET=x86_64-w64-mingw32
              PREFIX=$HOME/openssl-win64
              CONF=mingw64
              ;;
            windows-arm)
              TARGET=armv7-w64-mingw32
              PREFIX=$HOME/openssl-winarm
              CONF=mingw
              ;;
            windows-arm64)
              TARGET=aarch64-w64-mingw32
              PREFIX=$HOME/openssl-winarm64
              CONF=mingw64
              ;;
          esac

          curl -LO https://www.openssl.org/source/openssl-3.4.1.tar.gz
          tar -xf openssl-3.4.1.tar.gz
          cd openssl-3.4.1

          # 禁用 QUIC
          sed -i 's/\$disabled{"quic"} = "default";/\$disabled{"quic"} = "yes";/' Configure
          if [ -f "include/openssl/ssl.h.in" ]; then
            sed -i 's/# include <openssl\/quic.h>//g' include/openssl/ssl.h.in
          fi

          # 配置
          ./Configure $CONF \
            no-asm \
            no-shared \
            no-apps \
            no-tests \
            no-quic \
            -static \
            --prefix=$PREFIX \
            --cross-compile-prefix=$TARGET- \
            -DOPENSSL_NO_QUIC \
            -D_WINDLL \
            -DNO_WINCRYPT

          make -j"$(nproc)"
          make install_sw

          echo "OPENSSL_PREFIX=$PREFIX" >> $GITHUB_ENV

      - name: Configure FFmpeg
        shell: bash
        run: |
          case "${{ matrix.triplet }}" in
            linux-386)
              export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig
              ./configure --arch=i686 --target-os=linux --prefix=$PWD/build \
                --cc="gcc -m32" --cxx="g++ -m32" \
                --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config="pkg-config --static"
              ;;

            linux-arm|linux-arm64)
              if [[ "${{ matrix.triplet }}" == "linux-arm" ]]; then
                X264_PREFIX=$HOME/x264-arm
                CROSS_PREFIX=arm-linux-gnueabihf-
                ARCH=arm
              else
                X264_PREFIX=$HOME/x264-arm64
                CROSS_PREFIX=aarch64-linux-gnu-
                ARCH=aarch64
              fi
              
              export PKG_CONFIG_PATH=$X264_PREFIX/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig
              ./configure --arch=$ARCH --target-os=linux --cross-prefix=$CROSS_PREFIX --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config=pkg-config \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ;;

            windows-*)
              # Windows 目标通用配置
              case "${{ matrix.triplet }}" in
                windows-386)
                  X264_PREFIX=$HOME/x264-i686
                  OPENSSL_PREFIX=$HOME/openssl-win32
                  CROSS_PREFIX=i686-w64-mingw32-
                  ARCH=i686
                  ;;
                windows-amd64)
                  X264_PREFIX=$HOME/x264-win64
                  OPENSSL_PREFIX=$HOME/openssl-win64
                  CROSS_PREFIX=x86_64-w64-mingw32-
                  ARCH=x86_64
                  ;;
                windows-arm)
                  X264_PREFIX=$HOME/x264-winarm
                  OPENSSL_PREFIX=$HOME/openssl-winarm
                  CROSS_PREFIX=armv7-w64-mingw32-
                  ARCH=arm
                  ;;
                windows-arm64)
                  X264_PREFIX=$HOME/x264-winarm64
                  OPENSSL_PREFIX=$HOME/openssl-winarm64
                  CROSS_PREFIX=aarch64-w64-mingw32-
                  ARCH=arm64
                  ;;
              esac

              # 确定 OpenSSL 库路径 (lib 或 lib64)
              if [ -d "$OPENSSL_PREFIX/lib64" ]; then
                SSL_LIB_PATH="$OPENSSL_PREFIX/lib64"
              else
                SSL_LIB_PATH="$OPENSSL_PREFIX/lib"
              fi

              set +e

              ./configure --arch=$ARCH --target-os=win32 --cross-prefix=$CROSS_PREFIX --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared --disable-mediafoundation \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 \
                --extra-cflags="-I$X264_PREFIX/include -I$OPENSSL_PREFIX/include" \
                --extra-ldflags="-L$X264_PREFIX/lib -L$SSL_LIB_PATH -static" \
                --extra-libs="-lx264 -lssl -lcrypto -lws2_32 -lgdi32 -lcrypt32" --pkg-config=pkg-config

              ret=$?
              set -e
              if [ $ret -ne 0 ]; then
                echo "=== CONFIG.LOG (last 100 lines) ==="
                tail -n 100 ffbuild/config.log
                exit $ret
              fi
              ;;

            *)
              # macOS 和其他原生构建
              ./configure --prefix=$PWD/build \
                --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config="pkg-config --static"
              ;;
          esac

      - name: Build
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            make -j4
          else
            make -j"$(nproc)"
          fi
        shell: bash

      - name: Install
        run: make install
        shell: bash

      - name: Package
        shell: bash
        run: |
          cd build
          
          # 设置各平台路径
          case "${{ matrix.triplet }}" in
            darwin-arm64)
              X264_PREFIX=$HOME/x264-darwin-arm64
              OPENSSL_PREFIX=$HOME/openssl-darwin-arm64
              ;;
            darwin-amd64)
              X264_PREFIX=$HOME/x264-darwin-amd64
              OPENSSL_PREFIX=$HOME/openssl-darwin-amd64
              ;;
            linux-amd64)
              X264_PREFIX=$HOME/x264-amd64
              OPENSSL_PREFIX=$HOME/openssl-amd64
              ;;
            linux-386)
              X264_PREFIX=$HOME/x264-i386
              OPENSSL_PREFIX=$HOME/openssl-linux32
              ;;
            windows-arm64)
              X264_PREFIX=$HOME/x264-winarm64
              OPENSSL_PREFIX=$HOME/openssl-winarm64
              ;;
            windows-arm)
              X264_PREFIX=$HOME/x264-winarm
              OPENSSL_PREFIX=$HOME/openssl-winarm
              ;;
            windows-amd64)
              X264_PREFIX=$HOME/x264-win64
              OPENSSL_PREFIX=$HOME/openssl-win64
              ;;
            windows-386)
              X264_PREFIX=$HOME/x264-i686
              OPENSSL_PREFIX=$HOME/openssl-win32
              ;;
            linux-arm64)
              X264_PREFIX=$HOME/x264-arm64
              OPENSSL_PREFIX=$HOME/openssl-arm64
              ;;
            linux-arm)
              X264_PREFIX=$HOME/x264-arm
              OPENSSL_PREFIX=$HOME/openssl-arm
              ;;
            *)
              X264_PREFIX=""
              OPENSSL_PREFIX=""
              ;;
          esac
          
          # 创建目录结构
          mkdir -p lib include
          
          # 拷贝 x264
          if [ -n "$X264_PREFIX" ]; then
            [ -f "$X264_PREFIX/lib/libx264.a" ] && cp "$X264_PREFIX/lib/libx264.a" lib/
            [ -d "$X264_PREFIX/include" ] && cp -r "$X264_PREFIX/include/"* include/ 2>/dev/null || true
          fi
          
          # 拷贝 OpenSSL
          if [ -n "$OPENSSL_PREFIX" ]; then
            # 查找 OpenSSL 库文件
            find "$OPENSSL_PREFIX" -name "*.a" -exec cp {} lib/ \; 2>/dev/null || true
            [ -d "$OPENSSL_PREFIX/include" ] && cp -r "$OPENSSL_PREFIX/include/"* include/ 2>/dev/null || true
          fi
          
          echo "=== 最终打包内容 ==="
          echo "库文件:"
          ls -la lib/ || echo "无库文件"
          echo "头文件:"
          find include -type f | head -10 || echo "无头文件"
          
          # 打包
          zip -r ../ffmpeg-${{ matrix.triplet }}.zip *

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: ffmpeg-${{ matrix.triplet }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}