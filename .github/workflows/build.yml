name: Build FFmpeg Static

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-latest
            triplet: darwin-amd64
          - os: macos-14
            triplet: darwin-arm64

          # Linux
          - os: ubuntu-22.04
            triplet: linux-amd64
            arch: x86_64
          - os: ubuntu-22.04
            triplet: linux-386
            arch: i686
          - os: ubuntu-22.04
            triplet: linux-arm
            arch: arm
          - os: ubuntu-22.04
            triplet: linux-arm64
            arch: aarch64

          # Windows
          - os: windows-latest
            triplet: windows-amd64
            arch: x86_64
          - os: ubuntu-22.04
            triplet: windows-386
            arch: i686
          - os: ubuntu-22.04
            triplet: windows-arm
            arch: arm
          - os: ubuntu-22.04
            triplet: windows-arm64
            arch: aarch64

    steps:
      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: n7.1   # 或 master

      # Linux 依赖
      - name: Install deps (Linux x86/x86_64)
        if: matrix.triplet == 'linux-386' || matrix.triplet == 'linux-amd64'
        run: |
          sudo apt-get update
          if [ "${{ matrix.triplet }}" = "linux-386" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y \
              gcc-multilib g++-multilib \
              yasm nasm pkg-config build-essential \
              libx264-dev:i386 libssl-dev:i386
          else
            sudo apt-get install -y \
              yasm nasm pkg-config build-essential \
              libx264-dev libssl-dev
          fi

      - name: Install deps (Linux ARM/ARM64)
        if: matrix.triplet == 'linux-arm' || matrix.triplet == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y yasm nasm pkg-config build-essential \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libssl-dev

      # macOS 依赖
      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: brew install yasm nasm x264 openssl

      # Windows 依赖
      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        run: choco install make nasm yasm

      - name: Install deps (Windows 386 cross)
        if: matrix.triplet == 'windows-386'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-i686 g++-mingw-w64-i686 \
                                  binutils-mingw-w64-i686 mingw-w64-i686-dev \
                                  yasm nasm pkg-config libx264-dev \
                                  binutils-mingw-w64-i686 mingw-w64-i686-dev

      - name: Install deps (Windows arm/arm64 cross)
        if: matrix.triplet == 'windows-arm' || matrix.triplet == 'windows-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-i686 g++-mingw-w64-i686 \
                                  binutils-mingw-w64-i686 mingw-w64-i686-dev \
                                  yasm nasm pkg-config libx264-dev \
                                  binutils-mingw-w64-i686 mingw-w64-i686-dev

      - name: Install LLVM-mingw (Windows amd64 native)
        if: matrix.triplet == 'windows-amd64' && runner.os == 'Windows'
        shell: bash
        run: |
          curl -L -o llvm-mingw.zip https://github.com/mstorsjo/llvm-mingw/releases/download/20240820/llvm-mingw-20240820-ucrt-x86_64.zip
          unzip -q llvm-mingw.zip -d llvm-mingw
          TOOLCHAIN=$PWD/llvm-mingw/llvm-mingw-20240820-ucrt-x86_64
          echo "$TOOLCHAIN/bin" >> $GITHUB_PATH

      - name: Install LLVM-mingw (Windows cross targets on Ubuntu)
        if: (matrix.triplet == 'windows-386' || matrix.triplet == 'windows-arm' || matrix.triplet == 'windows-arm64') && runner.os == 'Linux'
        shell: bash
        run: |
          curl -L -o llvm-mingw.tar.xz https://github.com/mstorsjo/llvm-mingw/releases/download/20240820/llvm-mingw-20240820-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -xf llvm-mingw.tar.xz
          TOOLCHAIN=$PWD/llvm-mingw-20240820-ucrt-ubuntu-20.04-x86_64
          echo "$TOOLCHAIN/bin" >> $GITHUB_PATH

          for triplet in x86_64-w64-mingw32 i686-w64-mingw32 aarch64-w64-mingw32 armv7-w64-mingw32; do
            ln -sf $TOOLCHAIN/bin/llvm-strings $TOOLCHAIN/bin/${triplet}-strings
          done

      - name: Build and install x264 (Linux arm cross)
        if: matrix.triplet == 'linux-arm'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=arm-linux-gnueabihf \
            --cross-prefix=arm-linux-gnueabihf- \
            --enable-static \
            --disable-cli \
            --enable-pic \
            --prefix=$HOME/x264-arm
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-arm/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Linux arm64 cross)
        if: matrix.triplet == 'linux-arm64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=aarch64-linux-gnu \
            --cross-prefix=aarch64-linux-gnu- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-arm64
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-arm64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows 386 cross)
        if: matrix.triplet == 'windows-386'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=i686-w64-mingw32 \
            --cross-prefix=i686-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-i686
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-i686/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows amd64 cross)
        if: matrix.triplet == 'windows-amd64'
        shell: bash
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          CC=clang \
          AR=llvm-ar \
          RANLIB=llvm-ranlib \
          STRIP=llvm-strip \
          ./configure \
            --host=x86_64-w64-mingw32 \
            --cross-prefix=x86_64-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-win64
          sed -i 's/-mstack-alignment=64//g' config.mak
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-win64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows arm cross)
        if: matrix.triplet == 'windows-arm'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=arm-w64-mingw32 \
            --cross-prefix=armv7-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-winarm
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-winarm/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build and install x264 (Windows arm64 cross)
        if: matrix.triplet == 'windows-arm64'
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure \
            --host=aarch64-w64-mingw32 \
            --cross-prefix=aarch64-w64-mingw32- \
            --enable-static \
            --disable-cli \
            --prefix=$HOME/x264-winarm64
          make -j"$(nproc)"
          make install
          echo "PKG_CONFIG_PATH=$HOME/x264-winarm64/lib/pkgconfig" >> $GITHUB_ENV

      - name: Build OpenSSL 3 (cross targets)
        if: matrix.triplet == 'linux-arm' || matrix.triplet == 'linux-arm64' || matrix.triplet == 'windows-arm' || matrix.triplet == 'windows-arm64' || matrix.triplet == 'windows-386'
        run: |
          case "${{ matrix.triplet }}" in
            linux-arm)
              CROSS=arm-linux-gnueabihf
              CONF=linux-armv4
              PREFIX=$HOME/openssl-arm
              EXTRA="no-tests"
              ;;
            linux-arm64)
              CROSS=aarch64-linux-gnu
              CONF=linux-aarch64
              PREFIX=$HOME/openssl-arm64
              EXTRA="no-tests"
              ;;
            windows-arm)
              CROSS=armv7-w64-mingw32
              CONF=mingw64
              PREFIX=$HOME/openssl-winarm
              # 强制禁用 ASM，避免误用 x86_64 汇编
              EXTRA="no-asm no-tests"
              ;;
            windows-arm64)
              CROSS=aarch64-w64-mingw32
              CONF=mingw64
              PREFIX=$HOME/openssl-winarm64
              # 强制禁用 ASM，避免误用 x86_64 汇编
              EXTRA="no-asm no-tests"
              ;;
            windows-386)
              CROSS=i686-w64-mingw32
              CONF=mingw
              PREFIX=$HOME/openssl-win32
              EXTRA="no-tests"
              ;;
          esac

          wget https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xf openssl-3.3.2.tar.gz
          cd openssl-3.3.2

          ./Configure $CONF no-shared $EXTRA \
            --cross-compile-prefix=$CROSS- \
            --prefix=$PREFIX --openssldir=$PREFIX/ssl

          make -j$(nproc)
          make install_sw

          echo "OPENSSL_PREFIX=$PREFIX" >> $GITHUB_ENV

      - name: Configure FFmpeg
        shell: bash
        run: |
          case "${{ matrix.triplet }}" in
            linux-386)
              export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
              pkg-config --modversion x264
              ./configure --arch=i686 --target-os=linux --prefix=$PWD/build \
                --cc="gcc -m32" --cxx="g++ -m32" \
                --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config="pkg-config --static"
              ;;
            linux-arm)
              export PKG_CONFIG_PATH=$HOME/x264-arm/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
              pkg-config --modversion x264
              pkg-config --cflags x264
              pkg-config --libs x264
              arm-linux-gnueabihf-objdump -f $HOME/x264-arm/lib/libx264.a | head
              file $HOME/x264-arm/lib/libx264.a
              file /usr/arm-linux-gnueabihf/lib/libpthread.a
              set +e
              ./configure --arch=arm --target-os=linux --cross-prefix=arm-linux-gnueabihf- --prefix=$PWD/build \
                --cc=arm-linux-gnueabihf-gcc --cxx=arm-linux-gnueabihf-g++ \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config=pkg-config \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ret=$?
              set -e
              if [ $ret -ne 0 ]; then
                echo "=== CONFIG.LOG (last 100 lines) ==="
                tail -n 100 ffbuild/config.log
                exit $ret
              fi
              ;;
            linux-arm64)
              export PKG_CONFIG_PATH=$HOME/x264-arm64/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
              pkg-config --modversion x264
              ./configure --arch=aarch64 --target-os=linux --cross-prefix=aarch64-linux-gnu- --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config="pkg-config --static" \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ;;
            windows-386)
              export PKG_CONFIG_PATH=$HOME/x264-i686/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
              pkg-config --modversion x264
              ./configure --arch=i686 --target-os=win32 --cross-prefix=i686-w64-mingw32- --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264 --pkg-config="pkg-config --static" \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ;;
            windows-arm)
              export PKG_CONFIG_PATH=$HOME/x264-winarm/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
              pkg-config --modversion x264
              ./configure --arch=arm --target-os=win32 --cross-prefix=armv7-w64-mingw32- --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl  --enable-gpl --enable-libx264 --pkg-config="pkg-config --static" \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ;;
            windows-arm64)
              export PKG_CONFIG_PATH=$HOME/x264-winarm64/lib/pkgconfig:$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
              pkg-config --modversion x264
              ./configure --arch=arm64 --target-os=win32 --cross-prefix=aarch64-w64-mingw32- --prefix=$PWD/build \
                --enable-cross-compile --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl  --enable-gpl --enable-libx264 --pkg-config="pkg-config --static" \
                --extra-cflags="-I$OPENSSL_PREFIX/include" --extra-ldflags="-L$OPENSSL_PREFIX/lib"
              ;;
            *)
              ./configure --prefix=$PWD/build \
                --enable-static --disable-shared \
                --disable-programs --disable-doc --disable-debug \
                --disable-avdevice --disable-avfilter \
                --disable-encoders --disable-decoders --disable-muxers --disable-demuxers \
                --enable-protocol=http --enable-protocol=https \
                --enable-demuxer=mov --enable-demuxer=hls --enable-demuxer=aac --enable-demuxer=mp3 \
                --enable-muxer=mp4 --enable-muxer=gif \
                --enable-decoder=h264 --enable-decoder=aac --enable-decoder=mp3 \
                --enable-encoder=libx264 --enable-encoder=aac \
                --enable-version3 --enable-openssl --enable-gpl --enable-libx264
              ;;
          esac

      - name: Build
        run: |
          # macOS: limit parallelism to avoid posix_spawn resource errors
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            make -j4
          # Native Windows x86_64 job (windows-amd64): use mingw32-make single-thread
          elif [[ "${{ matrix.triplet }}" == "windows-amd64" ]]; then
            mingw32-make -j1
          # Other platforms: normal make with available cores
          else
            make -j"$(nproc)"
          fi
        shell: bash

      - name: Install
        run: |
          if [[ "${{ matrix.triplet }}" == "windows-amd64" ]]; then
            mingw32-make install
          else
            make install
          fi
        shell: bash

      - name: Package
        run: |
          cd build
          # Produce a clean, reproducible archive name per target
          zip -r ../ffmpeg-${{ matrix.triplet }}.zip *
        shell: bash

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: ffmpeg-${{ matrix.triplet }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
